cmake_minimum_required(VERSION 3.10)
project(QtAdvancedDockingSystem LANGUAGES CXX)
find_package(Qt5 COMPONENTS Core Gui Widgets REQUIRED)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
if (BUILD_STATIC)
    set(CMAKE_STATIC_LIBRARY_SUFFIX "_static${CMAKE_STATIC_LIBRARY_SUFFIX}")
endif ()
set(ads_SRCS
        ads_globals.cpp
        DockAreaTabBar.cpp
        DockAreaTitleBar.cpp
        DockAreaWidget.cpp
        DockContainerWidget.cpp
        DockManager.cpp
        DockOverlay.cpp
        DockSplitter.cpp
        DockWidget.cpp
        DockWidgetTab.cpp
        DockingStateReader.cpp
        DockFocusController.cpp
        ElidingLabel.cpp
        FloatingDockContainer.cpp
        FloatingDragPreview.cpp
        IconProvider.cpp
        DockComponentsFactory.cpp
        ads.qrc
        )
set(ads_HEADERS
        ads_globals.h
        DockAreaTabBar.h
        DockAreaTitleBar.h
        DockAreaTitleBar_p.h
        DockAreaWidget.h
        DockContainerWidget.h
        DockManager.h
        DockOverlay.h
        DockSplitter.h
        DockWidget.h
        DockWidgetTab.h
        DockingStateReader.h
        DockFocusController.h
        ElidingLabel.h
        FloatingDockContainer.h
        FloatingDragPreview.h
        IconProvider.h
        DockComponentsFactory.h
        )
if (UNIX)
    set(ads_SRCS linux/FloatingWidgetTitleBar.cpp ${ads_SRCS})
    set(ads_HEADERS linux/FloatingWidgetTitleBar.h ${ads_HEADERS})
endif ()

add_library(qtadvanceddocking SHARED ${ads_SRCS} ${ads_HEADERS})
target_compile_definitions(qtadvanceddocking PRIVATE ADS_SHARED_EXPORT)

target_link_libraries(qtadvanceddocking PUBLIC Qt5::Core Qt5::Gui Qt5::Widgets)
set_target_properties(qtadvanceddocking PROPERTIES
        AUTOMOC ON
        AUTORCC ON
        CXX_STANDARD 17
        CXX_STANDARD_REQUIRED ON
        CXX_EXTENSIONS OFF
        EXPORT_NAME "qtadvanceddocking"
        ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
        LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
        )

include(CMakePackageConfigHelpers)

target_include_directories(qtadvanceddocking PUBLIC
        $<INSTALL_INTERFACE:include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        )
