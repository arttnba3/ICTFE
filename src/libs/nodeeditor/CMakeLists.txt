cmake_minimum_required(VERSION 3.10)
# version 3.4 is required as other do not work with C++14 and clang

project(NodeEditor CXX)

set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)

option(BUILD_SHARED_LIBS "Build as shared library" ON)
option(NE_FORCE_TEST_COLOR "Force colorized unit test output" OFF)

enable_testing()

if (NE_DEVELOPER_DEFAULTS)
    set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_EXTENSIONS OFF)

    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
endif ()

add_subdirectory(external)

# Find the QtWidgets library
find_package(Qt5 COMPONENTS
        Core
        Widgets
        Gui
        OpenGL)

qt5_add_resources(RESOURCES ./resources/resources.qrc)

# Unfortunately, as we have a split include/src, AUTOMOC doesn't work.
# We'll have to manually specify some files
set(CMAKE_AUTOMOC ON)

set(CPP_SOURCE_FILES
        src/Connection.cpp
        src/ConnectionBlurEffect.cpp
        src/ConnectionGeometry.cpp
        src/ConnectionGraphicsObject.cpp
        src/ConnectionPainter.cpp
        src/ConnectionState.cpp
        src/ConnectionStyle.cpp
        src/DataModelRegistry.cpp
        src/FlowScene.cpp
        src/FlowView.cpp
        src/FlowViewStyle.cpp
        src/Node.cpp
        src/NodeConnectionInteraction.cpp
        src/NodeDataModel.cpp
        src/NodeGeometry.cpp
        src/NodeGraphicsObject.cpp
        src/NodePainter.cpp
        src/NodeState.cpp
        src/NodeStyle.cpp
        src/Properties.cpp
        src/StyleCollection.cpp
        )

# If we want to give the option to build a static library,
# set BUILD_SHARED_LIBS option to OFF
add_library(nodes
        ${CPP_SOURCE_FILES}
        ${RESOURCES}
        )
add_library(NodeEditor::nodes ALIAS nodes)

target_include_directories(nodes
        PUBLIC
        $<INSTALL_INTERFACE:include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/nodes/internal>
        )

target_link_libraries(nodes
        PUBLIC
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        Qt5::OpenGL
        )

target_compile_definitions(nodes
        PUBLIC
        ${Qt5Widgets_DEFINITIONS}
        NODE_EDITOR_SHARED
        PRIVATE
        NODE_EDITOR_EXPORTS
        #NODE_DEBUG_DRAWING
        QT_NO_KEYWORDS
        )

target_compile_options(nodes
        PRIVATE
        $<$<CXX_COMPILER_ID:MSVC>:/W4 /wd4127 /EHsc>
        $<$<CXX_COMPILER_ID:GNU>:-Wall -Wextra>
        $<$<CXX_COMPILER_ID:Clang>:-Wall -Wextra>
        )

target_compile_features(nodes
        PUBLIC
        cxx_generic_lambdas # Require C++14
        )

set_target_properties(nodes
        PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
        )

######
# Moc
##

file(GLOB_RECURSE HEADERS_TO_MOC include/nodes/internal/*.hpp)

qt5_wrap_cpp(nodes_moc
        ${HEADERS_TO_MOC}
        TARGET nodes
        OPTIONS --no-notes # Don't display a note for the headers which don't produce a moc_*.cpp
        )

target_sources(nodes PRIVATE ${nodes_moc})

###########
# Examples
##

if (BUILD_EXAMPLES)
    add_subdirectory(examples)
endif ()

##################
# Automated Tests
##

if (BUILD_TESTING)
    add_subdirectory(test)
endif ()
